{
    "Comment": "A state machine that does mock archiving.",
    "StartAt": "Set Defaults",
    "States": {
        "Set Defaults": {
            "Type": "Task",
            "Resource": "${SetDefaultsFunctionArn}",
            "Next": "Simulate Info"
        },
        "Simulate Info": {
            "Type": "Task",
            "Resource": "${SimulateInfoFunctionArn}",
            "ResultPath": "$.granule",
            "Next": "Need Approval?"
        },
        "Need Approval?": {
            "Type": "Choice",
            "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$.approval_needed",
                      "IsPresent": true
                    },
                    {
                      "Variable": "$.approval_needed",
                      "BooleanEquals": true,
                    }
                  ],
                  "Next": "Data Manager Approval?"
                }
            ],
            "Default": "Archive or Not?"
        },
        "Data Manager Approval?": {
          "Type": "Task",
          "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
          "Parameters": {
            "QueueUrl": "${HumanSQSUrl}",
            "MessageBody": {
                "Message": "Approve me!",
                "TaskToken.$": "$$.Task.Token"
             }
          },
          "ResultPath": "$.approval",
          "Next": "Archive or Not?"
        },
        "Archive or Not?": {
            "Type": "Choice",
            "Choices": [
                {
                  "Variable": "$.granule.archive",
                  "BooleanEquals": true,
                  "Next": "Quality?"
                }
            ],
            "Default": "Do Not Archive"
        },
        "Quality?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.granule.quality",
                    "NumericGreaterThanEquals": 50,
                    "Next": "Archive Granule"
                }
            ],
            "Default": "Bad Granule"
        },
        "Archive Granule": {
            "Type": "Task",
            "Resource": "${ArchiveGranuleFunctionArn}",
            "Parameters": {
              "url.$": "$.granule.url"
            },
            "ResultPath": "$.action",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ],
            "Next": "Record Result"
        },
        "Do Not Archive": {
            "Type": "Task",
            "Resource": "${UnarchivableGranuleFunctionArn}",
            "Parameters": {
              "url.$": "$.granule.url"
            },
            "ResultPath": "$.action",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ],
            "Next": "Record Result"
        },
        "Bad Granule": {
            "Type": "Task",
            "Resource": "${BadGranuleFunctionArn}",
            "Parameters": {
              "url.$": "$.granule.url"
            },
            "ResultPath": "$.action",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 1
                }
            ],
            "Next": "Record Result"
        },
        "Record Result": {
            "Type": "Task",
            "Resource": "${DDBPutItem}",
            "Parameters": {
                "TableName": "${DDBTable}",
                "Item": {
                    "Id": {
                        "S.$": "$.granule.id"
                    },
                    "Archive": {
                        "BOOL.$": "$.granule.archive"
                    },
                    "Quality": {
                        "N.$": "States.JsonToString($.granule.quality)"
                    },
                    "Action": {
                        "S.$": "$.action.action"
                    },
                    "Timestamp": {
                        "S.$": "$.action.timestamp"
                    },
                    "Approval": {
                        "BOOL.$": "$.approval_needed"
                    }
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 20,
                    "MaxAttempts": 5,
                    "BackoffRate": 10
                }
            ],
            "End": true
        }
    }
}
