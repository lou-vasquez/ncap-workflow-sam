AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  lv-sam-step-test

  Sample SAM Template for lv-sam-app-step-test

Resources:
  TestStepArchive:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/archiver_tiny_logic_test.asl.json
      Tags:
        "noaa:projectid": ncap
        "nesdis:name": ncap-archive
        "ncap:poc": lou.vasquez@noaa.gov
      DefinitionSubstitutions:
        SetDefaultsFunctionArn: !GetAtt SetDefaultsFunction.Arn
        SimulateInfoFunctionArn: !GetAtt SimulateInfoFunction.Arn
        ArchiveGranuleFunctionArn: !GetAtt ArchiveGranuleFunction.Arn
        BadGranuleFunctionArn: !GetAtt BadGranuleFunction.Arn
        UnarchivableGranuleFunctionArn: !GetAtt UnarchivableGranuleFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref ArchiveTable
        HumanSQSUrl: !Ref HumanSQS

      # Events:
      #   HourlyAggregationSchedule:
      #     Type: Schedule
      #     Properties:
      #       Description: Schedule to run aggregation
      #       Enabled: False
      #       Schedule: "rate(1 hour)"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref SimulateInfoFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ArchiveGranuleFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BadGranuleFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UnarchivableGranuleFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SetDefaultsFunction
        - DynamoDBWritePolicy:
            TableName: !Ref ArchiveTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt HumanSQS.QueueName
        - SQSPollerPolicy:
            QueueName: !GetAtt HumanSQS.QueueName

  SimulateInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/simulate-info/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Tags:
        "noaa:projectid": ncap
        "nesdis:name": ncap-archive
        "ncap:poc": lou.vasquez@noaa.gov

  ArchiveGranuleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/archive-granule/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Tags:
        "noaa:projectid": ncap
        "nesdis:name": ncap-archive
        "ncap:poc": lou.vasquez@noaa.gov

  BadGranuleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/bad-granule/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Tags:
        "noaa:projectid": ncap
        "nesdis:name": ncap-archive
        "ncap:poc": lou.vasquez@noaa.gov

  UnarchivableGranuleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.6
      InlineCode: |
        import datetime
        def handler(event, context):
          url = event['url']
          return {
            'action' : 'Unarchivable',
            'timestamp': datetime.datetime.now().isoformat()[:-3]+"Z"
          }
      Tags:
        "noaa:projectid": ncap
        "nesdis:name": ncap-archive
        "ncap:poc": lou.vasquez@noaa.gov

  SetDefaultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.6
      InlineCode: |
        def handler(event, context):
          return {
            'approval_needed': (event['approval_needed'] if ('approval_needed' in event) else False )
          }
      Tags:
        "noaa:projectid": ncap
        "nesdis:name": ncap-archive
        "ncap:poc": lou.vasquez@noaa.gov

  ArchiveTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        "noaa:projectid": ncap
        "nesdis:name": ncap-archive
        "ncap:poc": lou.vasquez@noaa.gov

  HumanSQS:
    Type: AWS::SQS::Queue
    # no idea why I can't get this to work here
    # seems to want Key, maybe need Key/Value pairs
    # Properties:
    #   Tags:
    #     "noaa:projectid": ncap
    #     "nesdis:name": ncap-archive
    #     "ncap:poc": lou.vasquez@noaa.gov

Outputs:
  ArchiverStateMachineArn:
    Description: "Archiver state machine ARN"
    Value: !Ref TestStepArchive
  ArchiverStateMachineRole:
    Description: "IAM Role for Archiver"
    Value: !GetAtt ArchiverStateMachineRole.Arn
  HumanQueueUrl :
    Description : "SQS Human Queue URL"
    Value: !Ref HumanSQS
  HumanQueueName :
    Description : "SQS Human Queue Name"
    Value: !GetAtt HumanSQS.QueueName
